import * as childProcess from 'child_process';
import * as fs from 'fs';
export const buildFrontend = () => {
    ['function'].forEach((f) => {
        fs.readdirSync(`${process.cwd()}/${f}`, {
            withFileTypes: true,
        })
            .filter((p) => p.isFile() && (p.name.endsWith('.js') || p.name.endsWith('.d.ts')))
            .map((p) => `${process.cwd()}/${f}/${p.name}`)
            .forEach((file) => {
            if (fs.existsSync(file)) {
                fs.rmSync(file, {
                    recursive: true,
                });
            }
        });
        ['pnpm install', 'pnpm build'].forEach((cmd) => {
            childProcess.execSync(cmd, {
                cwd: `${process.cwd()}/${f}/`,
                stdio: ['ignore', 'inherit', 'inherit'],
                env: { ...process.env },
                shell: process.env.SHELL || 'bash',
            });
        });
    });
    [`${process.cwd()}/../app/dist`].forEach((dir) => {
        if (fs.existsSync(dir)) {
            fs.rmSync(dir, {
                recursive: true,
            });
        }
    });
    ['pnpm build'].forEach((cmd) => {
        childProcess.execSync(cmd, {
            cwd: `${process.cwd()}/../app`,
            stdio: ['ignore', 'inherit', 'inherit'],
            env: { ...process.env },
            shell: 'bash',
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssWUFBWSxNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBQ2hDLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDekIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUN0QyxhQUFhLEVBQUUsSUFBSTtTQUNwQixDQUFDO2FBQ0MsTUFBTSxDQUNMLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDSixDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUNyRTthQUNBLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUM3QyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNoQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFDeEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7b0JBQ2QsU0FBUyxFQUFFLElBQUk7aUJBQ2hCLENBQUMsQ0FBQztZQUNMLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzdDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO2dCQUN6QixHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2dCQUM3QixLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztnQkFDdkMsR0FBRyxFQUFFLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFO2dCQUN2QixLQUFLLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksTUFBTTthQUNuQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUN0QyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ04sSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDdkIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7Z0JBQ2IsU0FBUyxFQUFFLElBQUk7YUFDaEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUMsQ0FDRixDQUFDO0lBRUYsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUM3QixZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUN6QixHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLFNBQVM7WUFDOUIsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7WUFDdkMsR0FBRyxFQUFFLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFO1lBQ3ZCLEtBQUssRUFBRSxNQUFNO1NBQ2QsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjaGlsZFByb2Nlc3MgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbmV4cG9ydCBjb25zdCBidWlsZEZyb250ZW5kID0gKCkgPT4ge1xuICBbJ2Z1bmN0aW9uJ10uZm9yRWFjaCgoZikgPT4ge1xuICAgIGZzLnJlYWRkaXJTeW5jKGAke3Byb2Nlc3MuY3dkKCl9LyR7Zn1gLCB7XG4gICAgICB3aXRoRmlsZVR5cGVzOiB0cnVlLFxuICAgIH0pXG4gICAgICAuZmlsdGVyKFxuICAgICAgICAocCkgPT5cbiAgICAgICAgICBwLmlzRmlsZSgpICYmIChwLm5hbWUuZW5kc1dpdGgoJy5qcycpIHx8IHAubmFtZS5lbmRzV2l0aCgnLmQudHMnKSksXG4gICAgICApXG4gICAgICAubWFwKChwKSA9PiBgJHtwcm9jZXNzLmN3ZCgpfS8ke2Z9LyR7cC5uYW1lfWApXG4gICAgICAuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhmaWxlKSkge1xuICAgICAgICAgIGZzLnJtU3luYyhmaWxlLCB7XG4gICAgICAgICAgICByZWN1cnNpdmU6IHRydWUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIFsncG5wbSBpbnN0YWxsJywgJ3BucG0gYnVpbGQnXS5mb3JFYWNoKChjbWQpID0+IHtcbiAgICAgIGNoaWxkUHJvY2Vzcy5leGVjU3luYyhjbWQsIHtcbiAgICAgICAgY3dkOiBgJHtwcm9jZXNzLmN3ZCgpfS8ke2Z9L2AsXG4gICAgICAgIHN0ZGlvOiBbJ2lnbm9yZScsICdpbmhlcml0JywgJ2luaGVyaXQnXSxcbiAgICAgICAgZW52OiB7IC4uLnByb2Nlc3MuZW52IH0sXG4gICAgICAgIHNoZWxsOiBwcm9jZXNzLmVudi5TSEVMTCB8fCAnYmFzaCcsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgW2Ake3Byb2Nlc3MuY3dkKCl9Ly4uL2FwcC9kaXN0YF0uZm9yRWFjaChcbiAgICAoZGlyKSA9PiB7XG4gICAgICBpZiAoZnMuZXhpc3RzU3luYyhkaXIpKSB7XG4gICAgICAgIGZzLnJtU3luYyhkaXIsIHtcbiAgICAgICAgICByZWN1cnNpdmU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICk7XG5cbiAgWydwbnBtIGJ1aWxkJ10uZm9yRWFjaCgoY21kKSA9PiB7XG4gICAgY2hpbGRQcm9jZXNzLmV4ZWNTeW5jKGNtZCwge1xuICAgICAgY3dkOiBgJHtwcm9jZXNzLmN3ZCgpfS8uLi9hcHBgLFxuICAgICAgc3RkaW86IFsnaWdub3JlJywgJ2luaGVyaXQnLCAnaW5oZXJpdCddLFxuICAgICAgZW52OiB7IC4uLnByb2Nlc3MuZW52IH0sXG4gICAgICBzaGVsbDogJ2Jhc2gnLFxuICAgIH0pO1xuICB9KTtcbn07XG4iXX0=