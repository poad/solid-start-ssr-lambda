#!/usr/bin/env node
import 'source-map-support/register';
import * as cdk from 'aws-cdk-lib';
import { CloudfrontCdnTemplateStack, } from '../lib/cdk-stack';
const app = new cdk.App();
const env = app.node.tryGetContext('env');
const config = env
    ? app.node.tryGetContext(env)
    : app.node.tryGetContext('default');
const endpoint = app.node.tryGetContext('oai-endpoint');
const apiKey = app.node.tryGetContext('oai-api-key');
const deployName = app.node.tryGetContext('oai-deploy');
const apiVersion = app.node.tryGetContext('oai-api-version');
const langfusePk = app.node.tryGetContext('langfuse-public-key');
const langfuseSk = app.node.tryGetContext('langfuse-secret-key');
const langfuseEndpoint = app.node.tryGetContext('langfuse-endpoint') ?? 'https://us.cloud.langfuse.com';
const langsmithApiKey = app.node.tryGetContext('langsmith-api-key');
const langfuseProject = app.node.tryGetContext('langsmith-project');
const langsmithEndpoint = app.node.tryGetContext('langsmith-endpoint') ?? 'https://api.smith.langchain.com';
const langfuse = langfuseSk && langfusePk ? {
    sk: langfuseSk,
    pk: langfusePk,
    endpoint: langfuseEndpoint,
} : undefined;
const langsmith = langsmithApiKey && langfuseProject ? {
    apiKey: langsmithApiKey,
    project: langfuseProject,
    endpoint: langsmithEndpoint,
} : undefined;
const anthoropicApiKey = app.node.tryGetContext('anthropic-api-key');
const claudeModel = app.node.tryGetContext('claude-model');
new CloudfrontCdnTemplateStack(app, config.stackName, {
    ...config,
    appName: 'llm-ts-example',
    environment: env,
    endpoint,
    apiKey,
    deployName,
    apiVersion,
    langfuse,
    anthoropicApiKey,
    claudeModel,
    env: {
        account: app.account,
        region: app.region,
    },
    langsmith,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2RrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLDZCQUE2QixDQUFDO0FBQ3JDLE9BQU8sS0FBSyxHQUFHLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFDTCwwQkFBMEIsR0FFM0IsTUFBTSxrQkFBa0IsQ0FBQztBQUUxQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxNQUFNLE1BQU0sR0FBbUMsR0FBRztJQUNoRCxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUV0QyxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN4RCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNyRCxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN4RCxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRTdELE1BQU0sVUFBVSxHQUF1QixHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3JGLE1BQU0sVUFBVSxHQUF1QixHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3JGLE1BQU0sZ0JBQWdCLEdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsSUFBSSwrQkFBK0IsQ0FBQztBQUVoSCxNQUFNLGVBQWUsR0FBdUIsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUN4RixNQUFNLGVBQWUsR0FBdUIsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUN4RixNQUFNLGlCQUFpQixHQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLElBQUksaUNBQWlDLENBQUM7QUFFcEgsTUFBTSxRQUFRLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDMUMsRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsVUFBVTtJQUNkLFFBQVEsRUFBRSxnQkFBZ0I7Q0FDM0IsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBRWQsTUFBTSxTQUFTLEdBQUcsZUFBZSxJQUFJLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFDckQsTUFBTSxFQUFFLGVBQWU7SUFDdkIsT0FBTyxFQUFFLGVBQWU7SUFDeEIsUUFBUSxFQUFFLGlCQUFpQjtDQUM1QixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFFZCxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDckUsTUFBTSxXQUFXLEdBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFNUQsSUFBSSwwQkFBMEIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRTtJQUNwRCxHQUFHLE1BQU07SUFDVCxPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLFdBQVcsRUFBRSxHQUFHO0lBQ2hCLFFBQVE7SUFDUixNQUFNO0lBQ04sVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsZ0JBQWdCO0lBQ2hCLFdBQVc7SUFDWCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87UUFDcEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO0tBQ25CO0lBQ0QsU0FBUztDQUNWLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCAnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQge1xuICBDbG91ZGZyb250Q2RuVGVtcGxhdGVTdGFjayxcbiAgQ29uZmlnLFxufSBmcm9tICcuLi9saWIvY2RrLXN0YWNrJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3QgZW52ID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZW52Jyk7XG5jb25zdCBjb25maWc6IENvbmZpZyAmIHsgc3RhY2tOYW1lOiBzdHJpbmcgfSA9IGVudlxuICA/IGFwcC5ub2RlLnRyeUdldENvbnRleHQoZW52KVxuICA6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2RlZmF1bHQnKTtcblxuY29uc3QgZW5kcG9pbnQgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdvYWktZW5kcG9pbnQnKTtcbmNvbnN0IGFwaUtleSA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ29haS1hcGkta2V5Jyk7XG5jb25zdCBkZXBsb3lOYW1lID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnb2FpLWRlcGxveScpO1xuY29uc3QgYXBpVmVyc2lvbiA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ29haS1hcGktdmVyc2lvbicpO1xuXG5jb25zdCBsYW5nZnVzZVBrOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdsYW5nZnVzZS1wdWJsaWMta2V5Jyk7XG5jb25zdCBsYW5nZnVzZVNrOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdsYW5nZnVzZS1zZWNyZXQta2V5Jyk7XG5jb25zdCBsYW5nZnVzZUVuZHBvaW50OiBzdHJpbmcgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdsYW5nZnVzZS1lbmRwb2ludCcpID8/ICdodHRwczovL3VzLmNsb3VkLmxhbmdmdXNlLmNvbSc7XG5cbmNvbnN0IGxhbmdzbWl0aEFwaUtleTogc3RyaW5nIHwgdW5kZWZpbmVkID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnbGFuZ3NtaXRoLWFwaS1rZXknKTtcbmNvbnN0IGxhbmdmdXNlUHJvamVjdDogc3RyaW5nIHwgdW5kZWZpbmVkID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnbGFuZ3NtaXRoLXByb2plY3QnKTtcbmNvbnN0IGxhbmdzbWl0aEVuZHBvaW50OiBzdHJpbmcgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdsYW5nc21pdGgtZW5kcG9pbnQnKSA/PyAnaHR0cHM6Ly9hcGkuc21pdGgubGFuZ2NoYWluLmNvbSc7XG5cbmNvbnN0IGxhbmdmdXNlID0gbGFuZ2Z1c2VTayAmJiBsYW5nZnVzZVBrID8ge1xuICBzazogbGFuZ2Z1c2VTayxcbiAgcGs6IGxhbmdmdXNlUGssXG4gIGVuZHBvaW50OiBsYW5nZnVzZUVuZHBvaW50LFxufSA6IHVuZGVmaW5lZDtcblxuY29uc3QgbGFuZ3NtaXRoID0gbGFuZ3NtaXRoQXBpS2V5ICYmIGxhbmdmdXNlUHJvamVjdCA/IHtcbiAgYXBpS2V5OiBsYW5nc21pdGhBcGlLZXksXG4gIHByb2plY3Q6IGxhbmdmdXNlUHJvamVjdCxcbiAgZW5kcG9pbnQ6IGxhbmdzbWl0aEVuZHBvaW50LFxufSA6IHVuZGVmaW5lZDtcblxuY29uc3QgYW50aG9yb3BpY0FwaUtleSA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2FudGhyb3BpYy1hcGkta2V5Jyk7XG5jb25zdCBjbGF1ZGVNb2RlbCAgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdjbGF1ZGUtbW9kZWwnKTtcblxubmV3IENsb3VkZnJvbnRDZG5UZW1wbGF0ZVN0YWNrKGFwcCwgY29uZmlnLnN0YWNrTmFtZSwge1xuICAuLi5jb25maWcsXG4gIGFwcE5hbWU6ICdsbG0tdHMtZXhhbXBsZScsXG4gIGVudmlyb25tZW50OiBlbnYsXG4gIGVuZHBvaW50LFxuICBhcGlLZXksXG4gIGRlcGxveU5hbWUsXG4gIGFwaVZlcnNpb24sXG4gIGxhbmdmdXNlLFxuICBhbnRob3JvcGljQXBpS2V5LFxuICBjbGF1ZGVNb2RlbCxcbiAgZW52OiB7XG4gICAgYWNjb3VudDogYXBwLmFjY291bnQsXG4gICAgcmVnaW9uOiBhcHAucmVnaW9uLFxuICB9LFxuICBsYW5nc21pdGgsXG59KTtcbiJdfQ==